package com.github.anilople.javajvm.constants;

public class AccessFlags {

    public static final short ACC_PUBLIC = 0x0001;

    public static final short ACC_PRIVATE = 0x0002;

    public static final short ACC_PROTECTED = 0x0004;

    public static final short ACC_STATIC = 0x0008;

    public static final short ACC_FINAL = 0x0010;

    public static final short ACC_SYNTHETIC = 0x1000;

    /**
     * Table 4.1-A. Class access and property modifiers
     */
    public static class ClassFlags {

        /**
         * Declared public; may be accessed from outside its
         * package.
         */
        public static final short ACC_PUBLIC = AccessFlags.ACC_PUBLIC;

        /**
         * Declared final; no subclasses allowed.
         */
        public static final short ACC_FINAL = AccessFlags.ACC_FINAL;

        /**
         * Treat superclass methods specially when invoked by
         * the invokespecial instruction.
         */
        public static final short ACC_SUPER = 0x0020;

        /**
         * Is an interface, not a class.
         */
        public static final short ACC_INTERFACE = 0x0200;

        /**
         * Declared abstract; must not be instantiated.
         */
        public static final short ACC_ABSTRACT = 0x0400;

        /**
         * Declared synthetic; not present in the source code.
         */
        public static final short ACC_SYNTHETIC = AccessFlags.ACC_SYNTHETIC;

        /**
         * Declared as an annotation type.
         */
        public static final short ACC_ANNOTATION = 0x2000;

        /**
         * Declared as an enum type.
         */
        public static final short ACC_ENUM = 0x4000;

    }

    /**
     * Table 4.5-A. Field access and property flags
     */
    public static class FieldFlags {

        /**
         * Declared public; may be accessed from outside its
         * package.
         */
        public static final short ACC_PUBLIC = AccessFlags.ACC_PUBLIC;

        /**
         * Declared private; usable only within the defining
         * class.
         */
        public static final short ACC_PRIVATE = AccessFlags.ACC_PRIVATE;

        /**
         * Declared protected; may be accessed within
         * subclasses.
         */
        public static final short ACC_PROTECTED = AccessFlags.ACC_PROTECTED;

        /**
         * Declared static.
         */
        public static final short ACC_STATIC = AccessFlags.ACC_STATIC;

        /**
         * Declared final; never directly assigned to after
         * object construction (JLS ยง17.5).
         */
        public static final short ACC_FINAL = AccessFlags.ACC_FINAL;

        /**
         * Declared volatile; cannot be cached.
         */
        public static final short ACC_VOLATILE = 0x0040;

        /**
         * Declared transient; not written or read by a
         * persistent object manager.
         */
        public static final short ACC_TRANSIENT = 0x0080;

        /**
         * Declared synthetic; not present in the source code.
         */
        public static final short ACC_SYNTHETIC = AccessFlags.ACC_SYNTHETIC;

        /**
         * Declared as an element of an enum.
         */
        public static final short ACC_ENUM = 0x4000;

    }

    /**
     * Table 4.6-A. Method access and property flags
     */
    public static class MethodFlags {

        /**
         * Declared public; may be accessed from outside its
         * package.
         */
        public static final short ACC_PUBLIC = AccessFlags.ACC_PUBLIC;

        /**
         * Declared private; accessible only within the
         * defining class.
         */
        public static final short ACC_PRIVATE = AccessFlags.ACC_PRIVATE;

        /**
         * Declared protected; may be accessed within
         * subclasses.
         */
        public static final short ACC_PROTECTED = AccessFlags.ACC_PROTECTED;

        /**
         * Declared static.
         */
        public static final short ACC_STATIC = AccessFlags.ACC_STATIC;

        /**
         * Declared final; must not be overridden (ยง5.4.5).
         */
        public static final short ACC_FINAL = AccessFlags.ACC_FINAL;

        /**
         * Declared synchronized; invocation is wrapped
         * by a monitor use.
         */
        public static final short ACC_SYNCHRONIZED = 0x0020;

        /**
         * A bridge method, generated by the compiler.
         */
        public static final short ACC_BRIDGE = 0x0040;

        /**
         * Declared with variable number of arguments.
         */
        public static final short ACC_VARARGS = 0x0080;

        /**
         * Declared native; implemented in a language other
         * than Java.
         */
        public static final short ACC_NATIVE = 0x0100;

        /**
         * Declared abstract; no implementation is
         * provided
         */
        public static final short ACC_ABSTRACT = 0x0400;

        /**
         * Declared strictfp; floating-point mode is FP-
         * strict.
         */
        public static final short ACC_STRICT = 0x0800;

        /**
         * Declared synthetic; not present in the source code.
         */
        public static final short ACC_SYNTHETIC = 0x1000;

    }

}
